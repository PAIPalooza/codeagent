version: '3.8'

services:
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: codeagent-postgres
    environment:
      POSTGRES_DB: codeagent
      POSTGRES_USER: codeagent
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codeagent -d codeagent"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - codeagent-network

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: codeagent-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - codeagent-network

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: codeagent-backend
    environment:
      - DATABASE_URL=postgresql://codeagent:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/codeagent
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      - SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-key-change-in-production}
      - AINATIVE_API_KEY=${AINATIVE_API_KEY}
      - AINATIVE_BASE_URL=${AINATIVE_BASE_URL:-https://api.ainative.studio/api/v1}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - ENVIRONMENT=production
      - PORT=8000
    volumes:
      - backend_data:/app/data
      - ./backend/logs:/app/logs
      - ./backend/downloads:/app/downloads
      - ./backend/temp_projects:/app/temp_projects
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - codeagent-network

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: codeagent-frontend
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://localhost:8000}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - codeagent-network

  # Ollama for local LLM inference (optional)
  ollama:
    image: ollama/ollama:latest
    container_name: codeagent-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - codeagent-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: codeagent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - codeagent-network

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: codeagent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - codeagent-network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: codeagent-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - codeagent-network

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:2.9.0
    container_name: codeagent-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - ./backend/logs:/var/log/app
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    restart: unless-stopped
    networks:
      - codeagent-network

volumes:
  postgres_data:
  redis_data:
  backend_data:
  ollama_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  codeagent-network:
    driver: bridge