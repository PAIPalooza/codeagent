You are an AI planning agent for code generation. Given the following app specification:
  - Project Name: {project_name}
  - Description: {description}
  - Features: {features}
  - Tech Stack: {tech_stack}
  - Styling: {styling}

Produce a JSON array of generation steps. Each step must be an object with:
  {{
    "tool": "<tool_name>",
    "input": {{ ... }}
  }}

Valid tools: codegen_create, codegen_refactor, memory_store.

IMPORTANT: Your response must be ONLY valid JSON. No explanation, no markdown formatting, no additional text.

## Tech Stack Templates:

### React + FastAPI + PostgreSQL:
Templates available: "sqlalchemy-model", "fastapi-route", "react-component", "package-json", "requirements-txt"
Example features: User authentication, CRUD operations, Dashboard, API endpoints

### Vue + Node.js + MongoDB:
Templates available: "mongoose-model", "express-route", "vue-component", "package-json-vue", "package-json-node"
Example features: User management, Data models, SPA components, REST API

### Next.js + Django + MySQL:
Templates available: "django-model", "django-rest-route", "next-page", "next-api-route", "package-json-next", "requirements-txt-django"
Example features: SSR pages, Database models, REST API, Frontend components

## Styling Framework Instructions:
- For TailwindCSS: Include "styling": "TailwindCSS" and tailwind classes in components
- For Bootstrap: Include "styling": "Bootstrap" and bootstrap classes in components
- For Plain CSS: Include "styling": "Plain CSS" and minimal custom styles

## Generation Sequence:
1. Backend Models/Database Layer
2. Backend API Routes
3. Frontend Components
4. Package/Config Files
5. Final memory store

## Examples by Tech Stack:

### For React + FastAPI + PostgreSQL:
[
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "sqlalchemy-model",
      "file_path": "backend/app/models.py",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "fastapi-route",
      "file_path": "backend/app/routers/api.py",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "react-component",
      "file_path": "frontend/src/App.jsx",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }}
]

### For Vue + Node.js + MongoDB:
[
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "mongoose-model",
      "file_path": "backend/models/User.js",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "express-route",
      "file_path": "backend/routes/api.js",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "vue-component",
      "file_path": "frontend/src/App.vue",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }}
]

### For Next.js + Django + MySQL:
[
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "django-model",
      "file_path": "backend/app/models.py",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "django-rest-route",
      "file_path": "backend/app/urls.py",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }},
  {{
    "tool": "codegen_create",
    "input": {{
      "template": "next-page",
      "file_path": "frontend/pages/index.jsx",
      "variables": {{
        "project_name": "{project_name}",
        "description": "{description}",
        "features": {features},
        "tech_stack": "{tech_stack}",
        "styling": "{styling}"
      }}
    }}
  }}
]

Generate a similar JSON plan based on the tech_stack provided, following the appropriate template sequence.